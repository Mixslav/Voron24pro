# This file contains common pin mappings for the BigTreeTech Octopus V1.
# To use this config, the firmware should be compiled for the STM32F446 with a "32KiB bootloader"
# Enable "extra low-level configuration options" and select the "12MHz crystal" as clock reference

# after running "make", copy the generated "klipper/out/klipper.bin" file to a
# file named "firmware.bin" on an SD card and then restart the OctoPus with that SD card.

# See docs/Config_Reference.md for a description of parameters.

## Voron Design VORON2.4 300mm BigTreeTech OctoPus V1 TMC2209 UART config

## *** THINGS TO CHANGE/CHECK: ***
## MCU paths                            [mcu] section
## Thermistor types                     [extruder] and [heater_bed] sections - See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types
## Hotend heater pin                    [extruder] section
## Z Endstop Switch location            [safe_z_home] section
## Homing end position                  [gcode_macro G32] section
## Z Endstop Switch  offset for Z0      [stepper_z] section
## Stepper Z1 enable pin                [stepper_z1] section
## Probe points                         [quad_gantry_level] section
## Min & Max gantry corner postions     [quad_gantry_level] section
## PID tune                             [extruder] and [heater_bed] sections
## Probe pin                            [probe] section
## Fine tune E steps                    [extruder] sectionÂ¸


## PROBE_CALIBRATE (for z offset) than SAVE_CONFIG

## Pin "^PG6" -   This ^ means active-low input I think.

## 	Common Temperature Sensors
##   "EPCOS 100K B57560G104F"
##   "ATC Semitec 104GT-2"
##   "NTC 100K beta 3950"
##   "Generic 3950"
##   "Honeywell 100K 135-104LAG-J01"
##   "NTC 100K MGB18-104F39050L32" (Keenovo Heater Pad)
##   "AD595"
##   "PT100 INA826"
##   "PT1000"
## z_offset = -0.550  For smooth plate

#[include runout.cfg]
#[include stealthburner_leds.cfg]
[include Adaptive_Mesh.cfg]
[include Voron_Line_Purge.cfg]
#[include adxl.cfg]  ############## Nozzle accelerometer !!! uncoment if needed
[include mainsail.cfg]
[include shell_command.cfg]
[include KAMP_Settings.cfg]
[virtual_sdcard]

path: /home/biqu/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[exclude_object] ## to exclude failed objects on print bed when multiprint ## also for "Superslicer" go to "settings" and "Output options" and check the "Label objects"

[mcu]
##  Obtain definition by "ls -l /dev/serial/by-id/" then unplug to verify
##--------------------------------------------------------------------
#serial: /dev/serial/by-id/usb-Klipper_stm32f446xx_270011001550535556323420-1f00
canbus_uuid: 255f46a19e6e
#restart_method: command
##--------------------------------------------------------------------

#[mcu adxl]
#serial: /dev/serial/by-id/usb-Klipper_rp2040_E6625887D3255230-if00
# Edit the above line with the correct serial address. Use "ls /dev/serial/by-id/*" to find the MCU serial address.

[mcu EBBCan]
canbus_uuid: ad612b7fd494

[printer]
kinematics: corexy
max_velocity: 300  
max_accel: 4500             #Max 4000 / mby even up to 8000
#max_accel_to_decel: 4000   # Optional form 3D printer school
max_z_velocity: 15          #Max 15 for 12V TMC Drivers, can increase for 24V
max_z_accel: 200 # default was 350
square_corner_velocity: 5.0

#####################################################################
#   X/Y Stepper Settings
#####################################################################

##  A Stepper - Right
##  Connected to MOTOR_1
##  Endstop connected to DIAG_1
[stepper_x]
step_pin: PF13
dir_pin: PF12
enable_pin: !PF14
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_x:virtual_endstop #PG6
position_min: 0
##--------------------------------------------------------------------

##  Uncomment for 300mm build
position_endstop: 300
position_max: 300

##--------------------------------------------------------------------
homing_speed: 25   #Max 100 #default 25
homing_retract_dist: 0 # default 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_x]
uart_pin: PC4
interpolate: false
run_current: 1.0 #default: 0.8
sense_resistor: 0.110
#hold_current: 0.5 # this is not for sensorless homing
#interpolate: true
#stealthchop_threshold: 400 #0
diag_pin: ^PG6 # same for endstop switch but without ^
########################### SET_TMC_FIELD STEPPER=stepper_x FIELD=SGTHRS VALUE=100
driver_SGTHRS: 75 # sensitivity for sensorless homing 0 - 255 

##  B Stepper - Left
##  Connected to MOTOR_0
##  Endstop connected to DIAG_0 (changed to Canbus PB5)
[stepper_y]
step_pin: PG0
dir_pin: PG1
enable_pin: !PF15
rotation_distance: 40
microsteps: 32
full_steps_per_rotation:200  #set to 400 for 0.9 degree stepper
endstop_pin: tmc2209_stepper_y:virtual_endstop #PG9
position_min: 0
##--------------------------------------------------------------------

##  Uncomment for 300mm build
position_endstop: 300
position_max: 300

##--------------------------------------------------------------------
homing_speed: 25  #Max 100 #default 25
homing_retract_dist: 0 # default 5
homing_positive_dir: true

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_y]
uart_pin: PD11
interpolate: false
run_current: 1.0 #default: 0.8
sense_resistor: 0.110
#hold_current: 0.5 # this is not for sensorless homing
#interpolate: true
#stealthchop_threshold: 400 #0
diag_pin: ^PG9 # same for endstop switch but without ^
####################################### SET_TMC_FIELD STEPPER=stepper_y FIELD=SGTHRS VALUE=60
driver_SGTHRS: 98 # sensitivity for sensorless homing 0 - 255 
 
#####################################################################
#   Z Stepper Settings
#####################################################################

## Z0 Stepper - Front Left
##  Connected to MOTOR_2
##  Endstop connected to DIAG_2
[stepper_z]
step_pin: PF11
dir_pin: PG3
enable_pin: !PG5
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32
#endstop_pin: PG10
endstop_pin: probe:z_virtual_endstop
##  Z-position of nozzle (in mm) to z-endstop trigger point relative to print surface (Z0)
##  (+) value = endstop above Z0, (-) value = endstop below
##  Increasing position_endstop brings nozzle closer to the bed
##  After you run Z_ENDSTOP_CALIBRATE, position_endstop will be stored at the very end of your config
##position_endstop: -0.5
##--------------------------------------------------------------------

##  Uncomment below for 300mm build
position_max: 260

##--------------------------------------------------------------------
position_min: -20
homing_speed: 8
second_homing_speed: 3
homing_retract_dist: 3

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z]
uart_pin: PC6
interpolate: false
run_current: 1.0 #default: 0.8
sense_resistor: 0.110
stealthchop_threshold: 99999

##  Z1 Stepper - Rear Left
##  Connected to MOTOR_3
[stepper_z1]
step_pin: PG4
dir_pin: !PC1
enable_pin: !PA0
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z1]
uart_pin: PC7
interpolate: false
run_current: 1.0 #default: 0.8
sense_resistor: 0.110
stealthchop_threshold: 99999

##  Z2 Stepper - Rear Right
##  Connected to MOTOR_4
[stepper_z2]
step_pin: PF9
dir_pin: PF10
enable_pin: !PG2
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z2]
uart_pin: PF2
interpolate: false
run_current: 1.0 #default: 0.8
sense_resistor: 0.110
stealthchop_threshold: 99999

##  Z3 Stepper - Front Right
##  Connected to MOTOR_5
[stepper_z3]
step_pin: PC13
dir_pin: !PF0
enable_pin: !PF1
rotation_distance: 40
gear_ratio: 80:16
microsteps: 32

##  Make sure to update below for your relevant driver (2208 or 2209)
[tmc2209 stepper_z3]
uart_pin: PE4
interpolate: false
run_current: 1.0 #default: 0.8
sense_resistor: 0.110
stealthchop_threshold: 99999

#####################################################################
#   Bed Heater
#####################################################################

##  SSR Pin - HE1
##  Thermistor - TB
[heater_bed]
##  Uncomment the following line if using the default SSR wiring from the docs site
heater_pin: PA3
##  Other wiring guides may use BED_OUT to control the SSR. Uncomment the following line for those cases
#heater_pin: PA1
## Check what thermistor type you have. See https://www.klipper3d.org/Config_Reference.html#common-thermistors for common thermistor types.
## Use "Generic 3950" for Keenovo heaters
sensor_type: Generic 3950
sensor_pin: PF3
##  Adjust max_power so it doesn't exceed the SSR rating. The Omron G3NA-210B-DC5 SSR is rated at 4 amps without a heatsink.
##  The formula is "4 / (Wattage_of_bed_heater / Mains_voltage) = max_power"
##  If max_power is greater than 1.0, use 1.0
max_power: 0.6
min_temp: 0
max_temp: 120
pwm_cycle_time: 0.02    # Reduces or eliminates light flickering. Formula is 1 / (Electrical frequency of your location in Hz)
control: pid
pid_kp: 34.018
pid_ki: 1.06
pid_kd: 272.995

#####################################################################
#   Thermals
#####################################################################

##Plot RPi temp: 
[temperature_sensor raspberry_pi]
##Pi Temps
sensor_type: temperature_host
max_temp: 100

##Plot MCU temp:
[temperature_sensor mcu_temp]
##Octopus PRO 1.1 Temps I guesss ?
sensor_type: temperature_mcu
max_temp: 100


[temperature_sensor edge_plate]
sensor_type: Generic 3950
sensor_pin: PF4
min_temp: 0
max_temp: 125

[temperature_sensor chamber_top]
sensor_type: Generic 3950
sensor_pin: PF6
min_temp: 0
max_temp: 100

[temperature_sensor chamber_gantry]
sensor_type: Generic 3950
sensor_pin: PF5
min_temp: 0
max_temp: 100

#####################################################################
#   Probe
#####################################################################

[probe] ## TAP ## PROBE_ACCURACY

#--------------------------------------------------------------------

pin: EBBCan: PB5 #PG15

#--------------------------------------------------------------------

x_offset: 0
y_offset: 0
#z_offset: 0
speed: 7
samples: 3
samples_result: median
sample_retract_dist: 3.0
samples_tolerance: 0.006
samples_tolerance_retries: 4

activate_gcode:
    {% set PROBE_TEMP = 130 %}
    {% set MAX_TEMP = PROBE_TEMP + 5 %}
    {% set ACTUAL_TEMP = printer.extruder.temperature %}
    {% set TARGET_TEMP = printer.extruder.target %}

    {% if TARGET_TEMP > PROBE_TEMP %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (TARGET_TEMP, PROBE_TEMP)) }
        M109 S{ PROBE_TEMP }
    {% else %}
        # Temperature target is already low enough, but nozzle may still be too hot.
        {% if ACTUAL_TEMP > MAX_TEMP %}
            { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (ACTUAL_TEMP, MAX_TEMP)) }
            TEMPERATURE_WAIT SENSOR=extruder MAXIMUM={ MAX_TEMP }
        {% endif %}
    {% endif %}

#####################################################################
#   Fan Control
#####################################################################

##  Exhaust fan - FAN3 (back fan 60 mm)
#################################################################
#[temperature_fan chamber]
#pin: PE5
#max_power: 1.0
#shutdown_speed: 0.0
#kick_start_time: 5.0
#cycle_time:0.01
#off_below:0.1
#sensor_type: Generic 3950
#sensor_pin: PF5
#min_temp: 0
#max_temp: 70
#target_temp: 26.0
#control: watermark
#gcode_id: C
################# if you want manual control ###################
##Exhaust Fan:
[fan_generic exhaust_fan]
##Exhaust fan - In E2 OUT Positon
pin: PE5
kick_start_time: 0.5
max_power: 1.0
#################################################################

##  Controller fan - FAN1 (bottom 60 mm)
[controller_fan vent_1]
pin: PD13
kick_start_time: 0.5
heater: heater_bed, extruder
max_power: 0.9
fan_speed: 0.8
stepper: stepper_x, stepper_y, stepper_z

##  Controller fan - FAN2 (bottom 60 mm)
[controller_fan vent_2]
pin: PD14
kick_start_time: 0.5
heater: heater_bed, extruder
max_power: 0.9
fan_speed: 0.8
stepper: stepper_x, stepper_y, stepper_z

##  Nevermorefilter fan - FAN4
#################################################################
#[heater_fan nevermore_fans]
#pin: PD12
#max_power: 0.8
#shutdown_speed: 0.0
#kick_start_time: 5.0
#heater: extruder #turn ON if extruder is ON
#fan_speed: 0.7
################# if you want manual control ###################
[fan_generic nevermore_fans]
pin: PD12
kick_start_time: 0.5
max_power: 0.95
#################################################################


#####################################################################
#   LED Control
#####################################################################

## Chamber Lighting - HE2 Connector (Optional)
[output_pin caselight]
##Octopus PRO 1.1
pin: PB10
pwm:true
shutdown_value: 0
value:0.1         #the brightness at startup (0-1)
cycle_time: 0.01

#####################################################################
#   Homing and Gantry Adjustment Routines
#####################################################################

[idle_timeout]
timeout: 1800

#[safe_z_home]  ## do not use this with sensorless homing or whatever
##  XY Location of the Z Endstop Switch
##  Update -10,-10 to the XY coordinates of your endstop pin 
##  (such as 157,305) after going through Z Endstop Pin
##  Location Definition step.
#home_xy_position:150,150 ## -10,-10
#speed:100
#z_hop:10

[bed_mesh]
speed: 120
horizontal_move_z: 10
mesh_min: 100,100 #50,50 ## standard
mesh_max: 200,200 #250, 250 ## standard
probe_count: 3,3 #5,5 ## standard

##  Use QUAD_GANTRY_LEVEL to level a gantry.
##  Min & Max gantry corners - measure from nozzle at MIN (0,0) and 
##  MAX (250, 250), (300,300), or (350,350) depending on your printer size
##  to respective belt positions
[quad_gantry_level]

#--------------------------------------------------------------------

##  Gantry Corners for 300mm Build
##  Uncomment for 300mm build
gantry_corners:
   -60,-10
   360,370
##  Probe points
points:
   50,50
   50,250
   250,250
   250,50

#--------------------------------------------------------------------
speed: 100
horizontal_move_z: 10
retries: 5
retry_tolerance: 0.0075
max_adjust: 10

########################################
# EXP1 / EXP2 (display) pins
########################################

[board_pins]
aliases:
    # EXP1 header
    EXP1_1=PE8, EXP1_2=PE7,
    EXP1_3=PE9, EXP1_4=PE10,
    EXP1_5=PE12, EXP1_6=PE13,    # Slot in the socket on this side
    EXP1_7=PE14, EXP1_8=PE15,
    EXP1_9=<GND>, EXP1_10=<5V>,

    # EXP2 header
    EXP2_1=PA6, EXP2_2=PA5,
    EXP2_3=PB1, EXP2_4=PA4,
    EXP2_5=PB2, EXP2_6=PA7,      # Slot in the socket on this side
    EXP2_7=PC15, EXP2_8=<RST>,
    EXP2_9=<GND>, EXP2_10=<5V>
    

# This file contains common pin mappings for the BIGTREETECH EBBCan
# Canbus board. To use this config, the firmware should be compiled for the
# STM32G0B1 with "8 MHz crystal" and "USB (on PA11/PA12)" or "CAN bus (on PB0/PB1)".
# The "EBB Can" micro-controller will be used to control the components on the nozzle.

# See docs/Config_Reference.md for a description of parameters.


################################# CAN BUS accelerometer !!!  ######
#[adxl345]
#cs_pin: EBBCan: PB12
#spi_software_sclk_pin: EBBCan: PB10
#spi_software_mosi_pin: EBBCan: PB11
#spi_software_miso_pin: EBBCan: PB2
#axes_map: x,y,z

##  Enable and add probe points later -Driver 732
#[resonance_tester]
#accel_chip: adxl345
#probe_points: 150,150,20
###################################################################

[extruder]
step_pin: EBBCan: PD0
dir_pin: !EBBCan: PD1
enable_pin: !EBBCan: PD2
##  Update value below when you perform extruder calibration
##  If you ask for 100mm of filament, but in reality it is 98mm:
##  rotation_distance = <previous_rotation_distance> * <actual_extrude_distance> / 100
##  22.6789511 is a good starting point
##  rotation_distance: 22.6789511   
rotation_distance: 22.679 #21.775 #33.500 Bondtech 5mm Drive Gears
##  Update Gear Ratio depending on your Extruder Type
##  Use 50:10 for Stealthburner/Clockwork 2
##  Use 50:17 for Afterburner/Clockwork (BMG Gear Ratio)
##  Use 80:20 for M4, M3.1
gear_ratio: 50:10 #50:17 BMG Gear Ratio
microsteps: 16  #32
full_steps_per_rotation: 200    #200 for 1.8 degree, 400 for 0.9 degree
nozzle_diameter: 0.500
filament_diameter: 1.750
heater_pin: EBBCan: PB13

# for the Thermistor Port
#sensor_type: PT1000
#sensor_pin: EBBCan: PA3

# for the MAX31865 sensor port for PT1000
sensor_type: MAX31865
sensor_pin: EBBCan:PA4
spi_software_sclk_pin: EBBCan:PA5
spi_software_mosi_pin: EBBCan:PA7
spi_software_miso_pin: EBBCan:PA6
## for PT100
# rtd_nominal_r: 100
# rtd_reference_r: 430Â¸
## for PT1000
rtd_nominal_r: 1000
rtd_reference_r: 4300
rtd_num_of_wires: 2
rtd_use_50Hz_filter: True

min_temp: 0  #0
max_temp: 300  #250
max_power: 1.0
min_extrude_temp: 170
control: pid
pid_Kp: 32.061
pid_Ki: 2.429
pid_Kd: 105.804
##  Try to keep pressure_advance below 1.0 (was 0.03)
pressure_advance: 0.02
##  Default is 0.040, leave stock
pressure_advance_smooth_time: 0.015
max_extrude_cross_section: 5

[tmc2209 extruder]
uart_pin: EBBCan: PA15
interpolate: false
run_current: 0.65  #0.4 , 0.3
#hold_current: 0.1
sense_resistor: 0.110
#stealthchop_threshold: 999999  #0

[fan]
pin: EBBCan: PA1
kick_start_time: 0.5
##  Depending on your fan, you may need to increase this value
##  if your fan will not start. Can change cycle_time (increase)
##  if your fan is not able to slow down effectively
off_below: 0.10

[heater_fan hotend_fan]
pin: EBBCan: PA0
max_power: 1.0
kick_start_time: 0.5
heater: extruder
heater_temp: 50.0
##  If you are experiencing back flow, you can reduce fan_speed
fan_speed: 0.95

##  Needs additional code to control LEDs individually -Driver 732
[neopixel hotend_rgb]
pin: EBBCan:PD3
chain_count: 3      # The amount of neo pixels in the strip
color_order: GRBW    # The type of neo pixel strip, e.g. RGBW GRB, RGB
initial_RED: 0.0    # The next 4 values are for the color you want the lights to start up with. 
initial_GREEN: 0.0  # Setting all the lights to 0, will turn them off
initial_BLUE: 0.0
initial_WHITE: 0.5  # Lights will be white when printer turns on 


[temperature_sensor EBBCan]
sensor_type: temperature_mcu
sensor_mcu: EBBCan
min_temp: 0
max_temp: 100

#[filament_switch_sensor switch_sensor]
#switch_pin: EBBCan:PB4

#[filament_motion_sensor motion_sensor]
#switch_pin: ^EBBCan:PB3

################################### Nozzle acc sensor ###############
#[adxl345]  
#cs_pin: adxl:gpio9
#spi_software_sclk_pin: adxl:gpio10
#spi_software_mosi_pin: adxl:gpio11
#spi_software_miso_pin: adxl:gpio12

#[resonance_tester]
#accel_chip: adxl345
##accel_per_hz: 70
#probe_points:
#    150,150,30
#####################################################################

[force_move] # this is to force printer to move axies even tho they are not homed (for safe homing)
enable_force_move: True

#####################################################################
#   Macros
#####################################################################

[gcode_macro HOME]
gcode:
    STATUS_HOMING  # Sets SB-leds to homing-mode
   {% if 'xyz' not in printer.toolhead.homed_axes %}
    __UNSAFE_RAISE_TOOL
    G4 S1000 # wait 1000 ms
    _HOME_X
    _HOME_Y
    _HOME_Z
   {% endif %}

[gcode_macro _HOME_X]
gcode:

    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.5 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    # Home X
    G28 X
    # Move away
    G91
    G1 X-10 F1200
    # Wait just a secondâ¦ (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.4 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}
    # Home Y
    G28 Y
    # Move away
    G91
    G1 Y-10 F1200
    # Wait just a secondâ¦ (give StallGuard registers time to clear)
    G4 P1000
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]

gcode:
    # Set the current position and the max limits
    {% set current_x = printer.toolhead.position.x %}
    {% set current_y = printer.toolhead.position.y %}
    {% set max_x = printer.configfile.config['stepper_x']['position_max'] %}
    {% set max_y = printer.configfile.config['stepper_y']['position_max'] %}

        {% if current_x > 7 and current_x < max_x|float and current_y > 7 and current_y < max_y|float %}
            G90
            # Home Z
            G28 Z0
            # Move away
            G1 Z10 F1200
        {% else %}
            # Optional: Move to a safe position before homing Z
            PARK_CENTER
            G90
            # Home Z
            G28 Z0
            # Move away
            G1 Z10 F1200
        {% endif %}


[gcode_macro G32]
gcode:
    BED_MESH_CLEAR

    ; stealth chop tuning process
    # motors off
    ;M84
    ;G4 P200

    # enable motors (this seems to energize the steppers in Klipper and no micro-moves are needed)
    ; SET_STEPPER_ENABLE STEPPER=stepper_x  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_y  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=1
    #wait at least 130ms for StealthChop to sense standstill current
    ;G4 P200

    #now proceed to home as normal
    QGL
    HOME


[gcode_macro __UNSAFE_RAISE_TOOL] # only Z works
gcode:
    G90
    SET_KINEMATIC_POSITION Z=0  ; Set kinematic Z axes position to 0
    G0 Z5 F300  ; Move 5mm
    M84

#########################  INPUTSHAPER  #################################
# ACCELEROMETER_QUERY (makesure there are any numbers)
# MEASURE_AXES_NOISE (if these numbers are less than 100 it is all good)
# ~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_y_*.csv -o /tmp/shaper_calibrate_y.png
# ~/klipper/scripts/calibrate_shaper.py /tmp/calibration_data_x_*.csv -o /tmp/shaper_calibrate_x.png
[gcode_macro INPUTSHAPER_X]
gcode:
  #M84 # Disables the stepper motors.
  HOME
  SHAPER_CALIBRATE AXIS=x
  #SAVE_CONFIG 

[gcode_macro INPUTSHAPER_Y]
gcode:
  #M84 # Disables the stepper motors.
  HOME
  SHAPER_CALIBRATE AXIS=y
  #SAVE_CONFIG 
##########################################################################

[gcode_macro PARK_FOR_CLEAN]
variable_start_x: 280
variable_start_y: 299
variable_start_z: 4.3

gcode:
    SAFE_LIFT_Z Z=10 F=1200
    G4 S500 # wait 500 ms
    SAVE_GCODE_STATE NAME=PARK_FOR_CLEAN
    
    G90
    G1 X{start_x} Y{start_y} F3000.0
    G4 S500  # Wait for 500ms
    G1 Z{start_z} F3000 # Move nozzle to the specified park coordinates
    G4 S500  # Wait for 500ms
    RESTORE_GCODE_STATE NAME=PARK_FOR_CLEAN

[gcode_macro PARK_REAR]
gcode:
    SAFE_LIFT_Z Z=10 F=1200
    G4 S500 # wait 500 ms
    SAVE_GCODE_STATE NAME=PARK_REAR
    ; park the head at the rear of the printer
    G90
    G1 X150 Y300 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_REAR

[gcode_macro PARK_CENTER]
gcode:
    SAFE_LIFT_Z Z=10 F=1200
    G4 S500 # wait 500 ms
    SAVE_GCODE_STATE NAME=PARK_CENTER
    ; park the head at the center of the printer
    G90
    G1 X150 Y150 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_CENTER

[gcode_macro PARK_FRONT]
gcode:
    SAFE_LIFT_Z Z=10 F=1200
    G4 S500 # wait 500 ms
    SAVE_GCODE_STATE NAME=PARK_FRONT
    ; park the head at the front of the printer
    G90
    G1 X150 Y50 F3000.0
    RESTORE_GCODE_STATE NAME=PARK_FRONT

[gcode_macro SAFE_Z_TO_H]
gcode:
    SAVE_GCODE_STATE NAME=SAFE_Z_TO_H
    # user parameters
    {% set z_position    = params.Z|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
    {% set axis_minimum  = printer.toolhead.axis_minimum %}
    
    # compute the target Z position within axis limits
    {% set z_position = [z_position, axis_maximum.z]|min|float %}
    {% set z_position = [z_position, axis_minimum.z]|max|float %}

    # limit the feedrate to a maximum of 1200
    {% set speed = [speed, 1200]|min|int %}

    G90
    G1 Z{z_position} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_Z_TO_H


[gcode_macro SAFE_LIFT_Z]
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
    {% set position      = printer.toolhead.position %}

    # compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float %}

    # limit the feedrate to a maximum of 1200
    {% set speed = [speed, 1200]|min|int %}

    G91
    G1 Z{z_height} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z


[gcode_macro SAFE_MOVE_TO]
gcode:
    SAVE_GCODE_STATE NAME=SAFE_MOVE_TO
    # user parameters
    {% set x_position    = params.X|default(printer.toolhead.position.x)|float %}
    {% set y_position    = params.Y|default(printer.toolhead.position.y)|float %}
    {% set z_position    = params.Z|default(printer.toolhead.position.z)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
    {% set axis_minimum  = printer.toolhead.axis_minimum %}
    
    # compute the target X position within axis limits
    {% set x_position = [x_position, axis_maximum.x]|min|float %}
    {% set x_position = [x_position, axis_minimum.x]|max|float %}

    # compute the target Y position within axis limits
    {% set y_position = [y_position, axis_maximum.y]|min|float %}
    {% set y_position = [y_position, axis_minimum.y]|max|float %}

    # compute the target Z position within axis limits
    {% set z_position = [z_position, axis_maximum.z]|min|float %}
    {% set z_position = [z_position, axis_minimum.z]|max|float %}

    # limit feedrate to a maximum of 1200
    {% set speed = [speed, 1200]|min|int %}

    G90
    G1 X{x_position} Y{y_position} Z{z_position} F{speed}

    RESTORE_GCODE_STATE NAME=SAFE_MOVE_TO
   
# [gcode_macro PRINT_WARMUP]
# #description: Perform initial homing and heating tasks
# variable_parameter_EXTRUDER_TEMP : 0
# variable_parameter_BED_TEMP : 0
# variable_parameter_PRINT_START_X : 0
# variable_parameter_PRINT_START_Y : 0
# variable_parameter_PRINT_END_X : 0
# variable_parameter_PRINT_END_Y : 0
# variable_callback : None
# gcode:
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
#     {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
#    # SHOW_BUILD_SHEET

#     M104 S{EXTRUDER_TEMP * 0.75}        ; set extruder temperature to 75%
#     M140 S{BED_TEMP}                    ; set bed temprature
#     M106 S25                            ; Enable the part cooling fan to keep the probe and cooling ducts cool during heat-up
#     G32                                 ; home all axes
#     STATUS_HEATING
#     PARK_CENTER                         ; place tool head in the middle of the print volume for even frame heating

#     # wait for top bed sensor to be in thermal equilibrium:
#     HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor top_bed' CANCEL='CANCEL_PRINT'

[gcode_macro BED_MESH_CAL]
#description: Sets the bed mesh area based on the size & location of the print
gcode:
    # defaults from bed_mesh
    {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
    {% set bed_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
    {% set bed_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
    {% set bed_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
    {% set bed_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
    {% set max_probe_count_x = bedMeshConfig.probe_count.split(",")[0]|int %}
    {% set max_probe_count_y = bedMeshConfig.probe_count.split(",")[1]|int %}
    # user parameters
    {% set area_min_x = params.PRINT_START_X|default(bed_min_x)|float %}
    {% set area_min_y = params.PRINT_START_Y|default(bed_min_y)|float %}
    {% set area_max_x = params.PRINT_END_X|default(bed_max_x)|float %}
    {% set area_max_y = params.PRINT_END_Y|default(bed_max_y)|float %}
    {% set mesh_area_padding = params.MESH_ARE_PADDING|default(5.0)|float %}
    {% set min_probe_count_x = params.MIN_PROBE_COUNT_X|default(3)|int %}
    {% set min_probe_count_y = params.MIN_PROBE_COUNT_Y|default(3)|int %}

    # add padding to the print area if possible
    {% set area_min_x = [area_min_x - mesh_area_padding, bed_min_x]|max %}
    {% set area_min_y = [area_min_y - mesh_area_padding, bed_min_y]|max %}
    {% set area_max_x = [area_max_x + mesh_area_padding, bed_max_x]|min %}
    {% set area_max_y = [area_max_y + mesh_area_padding, bed_max_y]|min %}

    # compute raw scaled values for the probe counts from 0 to max_probe_count_x/y
    {% set probe_count_unscaled_x = ((area_max_x - area_min_x)/bed_max_x) * max_probe_count_x|float %}
    {% set probe_count_unscaled_y = ((area_max_y - area_min_y)/bed_max_y) * max_probe_count_y|float %}

    # scale those values up from: 0 - min_probe_count_x/y to the scale: min_probe_count_x/y - min_probe_count_x/y
    {% set probe_count_x = ((max_probe_count_x - min_probe_count_x) * probe_count_unscaled_x / max_probe_count_x + min_probe_count_x)|round|int %}
    {% set probe_count_y = ((max_probe_count_y - min_probe_count_y) * probe_count_unscaled_y / max_probe_count_y + min_probe_count_y)|round|int %}

    {% set relative_reference_index = (((probe_count_x * probe_count_y) - 1) / 2)|int %}

    BED_MESH_CALIBRATE MESH_MIN={area_min_x},{area_min_y} MESH_MAX={area_max_x},{area_max_y} PROBE_COUNT={("%d,%d" % (probe_count_x,probe_count_y))} RELATIVE_REFERENCE_INDEX={relative_reference_index}


#####################################################################
#   print_start macro
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Z_TILT_ADJUST if your printer is a Trident
## Quad gantry level if your printer is a V2
## Nevermore - if you have one

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("0")|int %}

  # Homes the printer, sets absolute positioning and updates the Stealthburner leds.
  HOME                  # Full home (XYZ) or just Z to make sure
  G90                   # Absolut position

# Prepare bed for initial calibrations QGL and BMC
  SET_DISPLAY_TEXT MSG="Bed: 60c"                     # Displays info
  STATUS_HEATING                                      # Sets SB-leds to heating-mode
  PARK_FRONT                                          # Goes to the front of the bed
  M190 S60                                            # Sets the target temp to 60 for the bed

# Dynamically check the temperature using the bed temperature sensor
  HEAT_SOAK HEATER='heater_bed' TARGET=60 SOAKER='heater_bed' CANCEL='CANCEL_PRINT'
  SET_DISPLAY_TEXT MSG="Bed temperature stabilized"    # Display message when soaking completes

  ## (Quad gantry level or short: QGL)
  QGL
  
  PARK_CENTER
  _HOME_Z

  ##  Uncomment for bed mesh (2 of 2)
  SET_DISPLAY_TEXT MSG="Bed mesh"    # Displays info
  STATUS_MESHING                     # Sets SB-leds to bed mesh-mode
  BED_MESH_CLEAR                     # Clears old saved bed mesh (if any)
  BED_MESH_CALIBRATE                 # Starts bed mesh
  #BED_MESH_PROFILE LOAD="default" # DO NOT DO BED_MESH WHILE HOT just load default profile

  
  #SET_FILAMENT_SETTINGS EXTRUDER={target_extruder} # Set filament settings based on filament (extruder temperature from Superslicer)

# Checks the filament temperature and turns on the Nevermore fans if needed
  {% if target_extruder == 248 %}  ; ABS (high-temp material)
      SET_DISPLAY_TEXT MSG="High Temp Detected"
      STATUS_HEATING
      PARK_CENTER                         # Park center for even heat distribution
      SET_FAN_SPEED FAN=nevermore_fans SPEED=0.90  # Turn on Nevermore fan at 90%
      M190 S{target_bed}                  # Set the bed temperature
  
      # Wait for the EDGE OF THE BED to reach 70% of total bed temperature (heat soak for ABS)
      HEAT_SOAK HEATER='heater_bed' TARGET={target_bed * 0.7} SOAKER='temperature_sensor edge_plate' CANCEL='CANCEL_PRINT'
    
  {% elif target_extruder == 240 %}  ; PETG
      SET_DISPLAY_TEXT MSG="PETG Detected - Skipping Heat Soak"
      M190 S{target_bed}  # Heat bed normally (no edge soak, no Nevermore fan)
  
  {% elif target_extruder == 207 %}  ; PLA
      SET_DISPLAY_TEXT MSG="PLA Detected - Skipping Heat Soak"
      M190 S{target_bed}  # Heat bed normally (no edge soak, no Nevermore fan)
  
  {% else %}  ; Unknown material fallback
      SET_DISPLAY_TEXT MSG="Unknown Material - Skipping Heat Soak"
      M190 S{target_bed}  # Heat bed normally (no edge soak, no Nevermore fan)
  
  {% endif %}

# Heats up the nozzle up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"             # Displays info
  STATUS_HEATING                                                # Sets SB-leds to heating-mode
  PARK_FOR_CLEAN                                                # Goes to position for cleaning the nozzle
  M109 S{target_extruder}                                       # Heats the nozzle to printing temp
  CLEAN_NOZZLE

# Gets ready to print by doing a purge line and updating the SB-leds
# G1 E20 F300                                      # Extrudes 20 mm of filament at 300 mm/min (for allmetal hotend), also it is not needed anymore because KAMP will do the purging and move 
  SET_DISPLAY_TEXT MSG="Printer goes brr"          # Displays info
  STATUS_PRINTING                                  # Sets SB-leds to printing-mode
  LINE_PURGE
  G90                                              # Absolute position

[gcode_macro PRINT_END]
#description: tasks to reset the printer state and cool everything down.
gcode:
    {% set target_extruder = params.EXTRUDER|int %}  # Retrieve the extruder temperature from parameters
    #{% set target_bed = params.BED|int %}

    G1 E-10 F300                   ; retract fillament 10 mm at 300 mm/min
    M400                           ; wait for move buffer to clear
    TURN_OFF_HEATERS
    M109 S0                        # turn off nozzle heater
    STATUS_OFF
    M107                           # Turns off partcooling fan
    SET_FRAME_COMP ENABLE=0
    PARK_FOR_CLEAN                 ; Park the nozzle for cleaning

    # Check material type and handle cooldown
    {% if target_extruder == 248 %}  ; ABS
        TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=205  ; Wait until 205C (ABS threshold)
        CLEAN_NOZZLE
        G92 E0
        G91

        # Turn on the Nevermore and Exhaust fans
        M106 S255                                        # Turn on part cooling fan to 100%
        SET_FAN_SPEED FAN=nevermore_fans SPEED=0.90      # Nevermore fan at 90%
        SET_FAN_SPEED FAN=exhaust_fan SPEED=1.0          # Exhaust fan at 100%
        TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=120    # Wait until extruder cools down to 120C
        SET_FAN_SPEED FAN=nevermore_fans SPEED=0         # Turn off Nevermore fan
        SET_FAN_SPEED FAN=exhaust_fan SPEED=0            # Turn off Exhaust fan
        M107                                             # Turn off part cooling fan

    {% elif target_extruder == 240 %}  ; PETG
        TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=190  ; Wait until 190C (PETG threshold)
        CLEAN_NOZZLE
        G92 E0
        G91

    {% elif target_extruder == 207 %}  ; PLA
        TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=190  ; Wait until 170C (PLA threshold)
        CLEAN_NOZZLE
        G92 E0
        G91

    {% else %}  ; Unknown material fallback
        TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=190  ; Wait until 190C just to be safe
        CLEAN_NOZZLE
        G92 E0
        G91
    {% endif %}

[gcode_macro CLEAN_NOZZLE]
variable_start_x: 276
variable_start_y: 299
variable_start_z: 3.8
variable_wipe_dist: -50
variable_wipe_qty: 6
variable_wipe_spd: 200

gcode:
 
 G90 ; absolute positioning
 G1 X{start_x} Y{start_y} F6000 ## Move nozzle to start position
 G1 Z{start_z} F1500

 ## Wipe nozzle
 {% for wipes in range(1, (wipe_qty + 1)) %}
   G1 X{start_x + wipe_dist} F{wipe_spd * 60}
   G1 X{start_x} F{wipe_spd * 60}
 {% endfor %}

 PARK_FOR_CLEAN  ## go to start clean position

[gcode_macro MANUAL_PURGE_TO_PLA] ## not in function yet
gcode:
    HOME
    G90                                  # Absolut position
    PARK_FOR_CLEAN                       # Park the nozzle for cleaning
    M109 S245                            # Heat to 245Â°C and wait to reach temp
    G1 E40 F300                          # Extrude 60mm of filament at 300mm/min
    G1 E40 F300                          # Extrude 40mm of filament at 300mm/min
    M106 S255                            # Turn on the part cooling fan to 100%
    M104 S210                            # Set heater to 210Â°C
    CLEAN_NOZZLE
    TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=210  # Wait for nozzle to cool to 210Â°C
    G1 E35 F300                          # Extrude 35mm of filament at 300mm/min
    M104 S187                           # Set heater to 187Â°C
    TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=187  # Wait for nozzle to cool to 187Â°C
    CLEAN_NOZZLE                         
    M104 S0                           # Set heater to 0Â°C
    TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=80  ; Wait until the extruder cools down
    M107                                 # Turn off part cooling fan
    PARK_FRONT                           # Park at the front

[gcode_macro MANUAL_PURGE_TO_ABS] ## not in function yet
gcode:
    HOME
    G90                                  # Absolut position
    PARK_FOR_CLEAN                       # Park the nozzle for cleaning
    M109 S245                            # Heat to 245Â°C and wait to reach temp
    TEMPERATURE_WAIT SENSOR='extruder' MINIMUM=205  # Wait for nozzle to reach 205 C
    G1 E40 F300                          # Extrude 40mm of filament at 300mm/min
    G1 E40 F300                          # Extrude 40mm of filament at 300mm/min
    M106 S255                            # Turn on the part cooling fan to 100%
    M104 S0                              # Set heater to 0
    TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=225  # Wait for nozzle to cool to 210Â°C
    CLEAN_NOZZLE
    TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=80  ; Wait until the extruder cools down
    M107                                 # Turn off part cooling fan
    PARK_FRONT                           # Park at the front

[gcode_macro PURGE_PLA_TO_PLA] ## not in function yet
gcode:
    HOME
    G90                                  # Absolut position
    PARK_FOR_CLEAN                       # Park the nozzle for cleaning
    M109 S206                            # Heat to 205Â°C and wait to reach temp
    SET_DISPLAY_TEXT MSG="Heating extruder"    # Display message when soaking completes
    TEMPERATURE_WAIT SENSOR='extruder' MINIMUM=205  # Wait for nozzle to reach 205 C
    G1 E40 F300                          # Extrude 40mm of filament at 300mm/min
    G1 E40 F300                          # Extrude 40mm of filament at 300mm/min
    M106 S255                            # Turn on the part cooling fan to 100%
    SET_DISPLAY_TEXT MSG="Extruding complete"    # Display message when soaking completes
    M104 S0                              # Set heater to 0
    TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM={205 * 0.9}  # Wait for nozzle to cool to 90%
    CLEAN_NOZZLE
    SET_DISPLAY_TEXT MSG="Cooling down"    # Display message when soaking completes
    TEMPERATURE_WAIT SENSOR='extruder' MAXIMUM=80  ; Wait until the extruder cools down
    M107                                 # Turn off part cooling fan
    PARK_FRONT                           # Park at the front

[gcode_macro SET_FILAMENT_SETTINGS]
# description: custom settings per filament type
gcode:
    {% set target_extruder = params.EXTRUDER|int %}

    {% if target_extruder == 207 %}
        # PLA settings
        SET_PRESSURE_ADVANCE ADVANCE=0.02
        SET_DISPLAY_TEXT MSG="Printing PLA - Settings Loaded"

    {% elif target_extruder == 240 %}
        # PETG settings
        SET_PRESSURE_ADVANCE ADVANCE=0.02
        SET_DISPLAY_TEXT MSG="Printing PETG - Settings Loaded"

    {% elif target_extruder == 248 %}
        # ABS settings
        SET_PRESSURE_ADVANCE ADVANCE=0.02
        SET_DISPLAY_TEXT MSG="Printing ABS - Settings Loaded"

    {% else %}
        # Fallback for unknown material
        SET_PRESSURE_ADVANCE ADVANCE=0.02
        SET_DISPLAY_TEXT MSG="Unknown Filament - Default Settings Loaded"
    {% endif %}


# [gcode_macro CANCEL_PRINT]  ## triba rework ili uopÄe ne treba ova naredba
# #rename_existing: BASE_CANCEL_PRINT
# gcode:
#     TURN_OFF_HEATERS
#     M107
#     CLEAR_PAUSE
#    # SDCARD_RESET_FILE
#     SAFE_LIFT_Z Z=10 F=3000.0
#     PARK_FRONT
#     #G1 E-25 F300                   ; retract 25mm of filament at 300mm/min
#     STATUS_OFF
#     BED_MESH_CLEAR
#     SET_FRAME_COMP ENABLE=0
#     BASE_CANCEL_PRINT

[gcode_macro Z_OFFSET_CALIBRATE]
#description: Macro to calibrate the probe
gcode:
    QGL
    #BED_MESH_CLEAR             ; Clear the bed mesh
    PROBE_CALIBRATE            ; Start probe calibration

[gcode_macro QGL] ## (Quad gantry level or short: QGL)
gcode:
    HOME
   {% if printer.quad_gantry_level.applied|lower == 'false' %}
     SET_DISPLAY_TEXT MSG="QGL"
     STATUS_LEVELING
     QUAD_GANTRY_LEVEL
     PARK_CENTER

   {% endif %}

[gcode_macro CHAMBER_VENT]
gcode:
    {% set s = params.S|default(0)|float %}
    SET_TEMPERATURE_FAN_TARGET temperature_fan="chamber" target={s}
#For example:
  #  Place a CHAMBER_VENT S70 in the start g-code to hold the chamber at a high temperature for the duration of the print
  #  Place a CHAMBER_VENT S35 in the ending g-code to cooldown the chamber after a print is completed.

# Z OFFSET = more negative number means closer to bed !!!!!!!!!!!!!!!

#*# <---------------------- SAVE_CONFIG ---------------------->
#*# DO NOT EDIT THIS BLOCK OR BELOW. The contents are auto-generated.
#*#
#*# [heater_bed]
#*#
#*# [extruder]
#*#
#*# [probe]
#*# z_offset = -0.950
#*#
#*# [bed_mesh default]
#*# version = 1
#*# points =
#*# 	  -0.010000, -0.003750, 0.005000
#*# 	  0.006250, -0.011250, 0.003750
#*# 	  -0.002500, -0.017500, -0.007500
#*# x_count = 3
#*# y_count = 3
#*# mesh_x_pps = 2
#*# mesh_y_pps = 2
#*# algo = lagrange
#*# tension = 0.2
#*# min_x = 100.0
#*# max_x = 200.0
#*# min_y = 100.0
#*# max_y = 200.0
#*#
#*# [input_shaper]
#*# shaper_type_x = zv
#*# shaper_freq_x = 54.0
